{"version":3,"sources":["components/Card.js","App.js","index.js"],"names":["Card","props","react_default","a","createElement","className","isOn","onClick","reveal","src","image","alt","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","backendUrl","statusMessages","next_card","not_a_match","match","win","select_characters","first_card","state","cards","card1","lock","matches","message","search_results","start_game","shuffledCards","randomIndex","length","Math","floor","random","push","index","toConsumableArray","setState","code","play","_this2","id","setTimeout","name","_this3","url","fetch","then","response","json","items","character","isClone","clone","objectSpread","concat","filter","card","shuffleCards","_this4","startGame","result","map","key","thumbnail","removeCard","lib","minLength","delayTimeout","onChange","event","handleSearch","target","value","addCard","src_components_Card","e","handleCardClick","href","title","Component","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.8889545f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Card.css';\n\nconst Card = props => (\n  <div className={\"card\" + (props.isOn ? \" card--on\" : \"\")} onClick={() => props.reveal()}>\n    {props.isOn ? \n      <img className=\"card__image\" src={props.image} alt=\"\" />\n      :\n      \"?\"}\n  </div>\n);\n\nCard.propTypes = {\n    id: PropTypes.number.isRequired,\n    image: PropTypes.string.isRequired,\n    isOn: PropTypes.bool.isRequired,\n    reveal: PropTypes.func.isRequired\n  }\n\nexport default Card;\n","import React, { Component } from 'react';\nimport {DelayInput} from 'react-delay-input';\nimport Card from './components/Card';\nimport './App.css';\n\nclass App extends Component {\n  backendUrl = \"http://0.0.0.0:5000/find/\"\n\n  statusMessages = {\n    next_card: \"Good! Now pick another card.\",\n    not_a_match: \"Tough luck! Try again.\",\n    match: \"Very well! Find the next pair.\",\n    win: \"Excellent! You found them all.\",\n    select_characters: \"Choose 3 or more Marvel characters.\",\n    first_card: \"Select a card.\",\n  }\n\n  constructor() {\n    super();\n    this.state = {\n      cards: [],\n      card1: -1,\n      lock: false,\n      matches: 0,\n      message: this.statusMessages.select_characters,\n      search_results: [],\n      start_game: false\n    }\n  }\n\n  /**\n   * Rearrange elements in array.\n   * \n   * @return shuffled array\n   */\n  shuffleCards(cards) {\n    let shuffledCards = [];\n    let randomIndex = 0;\n\n    // Shuffle cards\n    while (shuffledCards.length < cards.length) {\n\n      // Random value between 0 and cards.length - 1\n      randomIndex  = Math.floor(Math.random() * cards.length);\n\n      // If element isn't false, add element to shuffled deck\n      if (cards[randomIndex]) {\n        \n        // Add new element to shuffle deck\n        shuffledCards.push(cards[randomIndex]);\n\n        // Set element to false to avoid being reused\n        cards[randomIndex] = false;\n      }\n    }\n\n    return shuffledCards;\n  }\n\n  handleCardClick(index) {\n    if (this.state.lock) {\n      return false;\n    }\n\n    if (this.state.cards[index].isOn) {\n      return false;\n    }\n\n    let cards = [...this.state.cards];\n    cards[index].isOn = true;\n    \n    this.setState({\n      cards: cards\n    });\n\n    let code = this.play(index);\n    this.setState({\n      message: this.statusMessages[code]\n    });\n\n  }\n\n  play(index) {\n    // Check if first card was selected.\n    if (this.state.card1 === -1) {\n      this.setState({\n        card1: index\n      })\n\n      return 'next_card';\n    }\n\n    // If first card wasn't selected, then it's safe to assume that the second card was.\n    let cards = [...this.state.cards];\n    let card1 = this.state.card1;\n    let matches = this.state.matches;\n\n    // Check if cards don't match.\n    if (cards[card1].id !== cards[index].id) {\n      // Lock all cards\n      this.setState({\n        lock: true\n      }) \n      setTimeout(() => {\n        cards[card1].isOn = false;\n        cards[index].isOn = false;\n        \n        this.setState({\n          card1: -1,\n          cards: cards,\n          lock: false \n        }) \n      }, 1000);\n\n      return 'not_a_match';\n    }\n\n    // Selected cards are a match.\n    this.setState({\n      card1: -1,\n      matches: matches + 1\n    });\n\n    // Check if all matching cards have been found.\n    if ((matches + 1) === (cards.length / 2)) {\n      return 'win';\n    }\n\n    return 'match';\n  }\n\n  handleSearch(name) {\n    if (name) {\n      const url = this.backendUrl + name;\n      fetch(url)\n        .then(response => {\n          // TODO: Handle failed request.\n          // console.log(response);\n          return response.json()\n        })\n        .then(items => { \n          this.setState({\n            search_results: items\n          });\n        });\n    }\n    else {\n          this.setState({\n            search_results: []\n          });\n    }\n  }\n\n  addCard(character) {\n    // TODO: Check that character doesn't already exist.\n    // TODO: Don't show add button if character was already chosen.\n    character.isOn = false;\n    character.isClone = false;\n    let clone = {\n      ...character,\n      isClone: true\n    }\n    this.setState({\n      cards: [\n        ...this.state.cards,\n        character,\n        clone\n      ]\n    });\n  }\n\n  removeCard(id) {\n    let cards = this.state.cards.filter(card => card.id !== id) \n    this.setState({\n      cards: cards\n    });\n  }\n\n  startGame() {\n    let cards = [...this.state.cards];\n    let shuffleCards = this.shuffleCards(cards)\n    this.setState({\n      cards: shuffleCards,\n      start_game: true,\n      message: this.statusMessages.first_card\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"memory-game\">\n        <div className=\"status-bar\">\n          <p>{this.state.message}</p>\n        </div>\n        <div className={\"start-game\" + (this.state.cards.length > 5 && !this.state.start_game ? \"\" : \" hide\")}>\n          <button onClick={() => this.startGame()}>Start Game</button>\n        </div>\n        <div className={\"search\" + (!this.state.start_game ? \"\" : \" hide\")}>\n          <ul className=\"chosen-cards\">\n            {\n              this.state.cards\n              .filter(result => !result.isClone)\n              .map((result, index) =>\n                <li key={index} className=\"chosen-cards__item\">\n                  <img src={result.thumbnail} alt=\"\" />\n                  <button onClick={() => this.removeCard(result.id)}>Remove</button>\n                </li>\n              )\n            } \n          </ul>\n          <DelayInput\n            minLength={2}\n            delayTimeout={300}\n            className=\"search__box\"\n            onChange={(event) => this.handleSearch(event.target.value)}\n          />\n          <ul className=\"search__results\">\n            {\n              this.state.search_results.map((result, index) =>\n                <li key={index} className=\"result\">\n                  <img src={result.thumbnail} alt=\"\" />\n                  {result.name}\n                  <button onClick={() => this.addCard(result)}>Add</button>\n                </li>\n              )\n            } \n          </ul>\n        </div>\n        <ul className={\"cards\" + (this.state.start_game ? \"\" : \" hide\")}>\n          {\n            this.state.cards.map((card, index) =>\n              <li key={index} className=\"card__item\">\n                <Card\n                  id={card.id}\n                  image={card.image}\n                  isOn={card.isOn}\n                  reveal={e => this.handleCardClick(index)}\n                />\n              </li>\n            )\n          } \n        </ul>\n        <div className=\"attribution\">\n          <p>Data provided by <a href=\"http://marvel.com\" title=\"Go to Marvel's website\">Marvel</a>. © 2019 Marvel</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport App from './App';\n\nrender(<App />, document.getElementById('root'));\n"],"sourceRoot":""}