{"version":3,"sources":["components/Card.js","App.js","index.js"],"names":["Card","props","react_default","a","createElement","className","isOn","onClick","reveal","value","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","statusMessages","next_card","not_a_match","match","win","state","cards","card1","matches","message","createCards","shuffleCards","setState","uniqueCards","count","push","shuffledCards","randomIndex","length","Math","floor","random","index","toConsumableArray","code","play","_this2","setTimeout","_this3","map","card","key","src_components_Card","e","handleCardClick","Component","render","src_App_0","document","getElementById"],"mappings":"+MAgBeA,SAZF,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,QAAUJ,EAAMK,KAAO,YAAc,IAAKC,QAAS,kBAAMN,EAAMO,WAC5EP,EAAMK,KAAOL,EAAMQ,MAAQ,OCqKjBC,qBA/Jb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QARFI,eAAiB,CACfC,UAAW,+BACXC,YAAa,yBACbC,MAAO,iCACPC,IAAK,mDAKLX,EAAKY,MAAQ,CACXC,MAAO,GACPC,OAAQ,EACRC,QAAS,EACTC,QAAS,mCANChB,mFAWZ,IAAIa,EAAQV,KAAKc,YAAY,GACzBC,EAAef,KAAKe,aAAaL,GAErCV,KAAKgB,SAAS,CACZN,MAAOK,wCASCE,GAIV,IAHA,IAAIP,EAAQ,GACRQ,EAAQ,EAELA,EAAQD,GACbC,IACAR,EAAMS,KAAK,CACTxB,MAAOuB,EACP1B,MAAM,IAERkB,EAAMS,KAAK,CACTxB,MAAOuB,EACP1B,MAAM,IAIV,OAAOkB,uCAQIA,GAKX,IAJA,IAAIU,EAAgB,GAChBC,EAAc,EAGXD,EAAcE,OAASZ,EAAMY,QAM9BZ,EAHJW,EAAeE,KAAKC,MAAMD,KAAKE,SAAWf,EAAMY,WAM9CF,EAAcD,KAAKT,EAAMW,IAGzBX,EAAMW,IAAe,GAIzB,OAAOD,0CAGOM,GACd,GAAI1B,KAAKS,MAAMC,MAAMgB,GAAOlC,KAC1B,OAAO,EAGT,IAAIkB,EAAKZ,OAAA6B,EAAA,EAAA7B,CAAOE,KAAKS,MAAMC,OAC3BA,EAAMgB,GAAOlC,MAAO,EAEpBQ,KAAKgB,SAAS,CACZN,MAAOA,IAGT,IAAIkB,EAAO5B,KAAK6B,KAAKH,GACrB1B,KAAKgB,SAAS,CACZH,QAASb,KAAKI,eAAewB,kCAK5BF,GAAO,IAAAI,EAAA9B,KAEV,IAA0B,IAAtBA,KAAKS,MAAME,MAKb,OAJAX,KAAKgB,SAAS,CACZL,MAAOe,IAGF,YAIT,IAAIhB,EAAKZ,OAAA6B,EAAA,EAAA7B,CAAOE,KAAKS,MAAMC,OACvBC,EAAQX,KAAKS,MAAME,MACnBC,EAAUZ,KAAKS,MAAMG,QAGzB,OAAIF,EAAMC,GAAOhB,QAAUe,EAAMgB,GAAO/B,OACtCoC,WAAW,WACTrB,EAAMC,GAAOnB,MAAO,EACpBkB,EAAMgB,GAAOlC,MAAO,EAEpBsC,EAAKd,SAAS,CACZL,OAAQ,EACRD,MAAOA,KAER,KAEI,gBAITV,KAAKgB,SAAS,CACZL,OAAQ,EACRC,QAASA,EAAU,IAIhBA,EAAU,IAAQF,EAAMY,OAAS,EAC7B,MAGF,0CAGA,IAAAU,EAAAhC,KACP,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAIU,KAAKS,MAAMI,UAEjBzB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAEVS,KAAKS,MAAMC,MAAMuB,IAAI,SAACC,EAAMR,GAAP,OACnBtC,EAAAC,EAAAC,cAAA,MAAI6C,IAAKT,EAAOnC,UAAU,QACxBH,EAAAC,EAAAC,cAAC8C,EAAD,CACEzC,MAAOuC,EAAKvC,MACZH,KAAM0C,EAAK1C,KACXE,OAAQ,SAAA2C,GAAC,OAAIL,EAAKM,gBAAgBZ,kBA5JlCa,cCAlBC,iBAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.84239915.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Card.css';\n\nconst Card = props => (\n  <div className={\"card\" + (props.isOn ? \" card--on\" : \"\")} onClick={() => props.reveal()}>\n    {props.isOn ? props.value : \"?\"}\n  </div>\n);\n\nCard.propTypes = {\n    value: PropTypes.number.isRequired,\n    isOn: PropTypes.bool.isRequired,\n    reveal: PropTypes.func.isRequired\n  }\n\nexport default Card;\n","import React, { Component } from 'react';\nimport Card from './components/Card';\nimport './App.css';\n\nclass App extends Component {\n  statusMessages = {\n    next_card: \"Nice! Now pick another card.\",\n    not_a_match: \"Tough luck! Try again.\",\n    match: \"Very well! Find the next pair.\",\n    win: \"Excellent! You found all of the matching cards.\"\n  }\n\n  constructor() {\n    super();\n    this.state = {\n      cards: [],\n      card1: -1,\n      matches: 0,\n      message: \"Start game by selecting a card.\"\n    }\n  }\n  \n  componentDidMount() {\n    let cards = this.createCards(8);\n    let shuffleCards = this.shuffleCards(cards);\n\n    this.setState({\n      cards: shuffleCards\n    })\n  }\n\n  /**\n   * Create an array of sorted cards\n   * \n   * @return array of card values\n   */\n  createCards(uniqueCards) {\n    let cards = [];\n    let count = 0; \n\n    while (count < uniqueCards) {\n      count++;\n      cards.push({\n        value: count,\n        isOn: false\n      });\n      cards.push({\n        value: count,\n        isOn: false\n      });\n    }\n\n    return cards;\n  }\n\n   /**\n    * Rearrange elements in array.\n    * \n    * @return shuffled array\n    */\n  shuffleCards(cards) {\n    let shuffledCards = [];\n    let randomIndex = 0;\n\n    // Shuffle cards\n    while (shuffledCards.length < cards.length) {\n\n      // Random value between 0 and cards.length - 1\n      randomIndex  = Math.floor(Math.random() * cards.length);\n\n      // If element isn't false, add element to shuffled deck\n      if (cards[randomIndex]) {\n        \n        // Add new element to shuffle deck\n        shuffledCards.push(cards[randomIndex]);\n\n        // Set element to false to avoid being reused\n        cards[randomIndex] = false;\n      }\n    }\n\n    return shuffledCards;\n  }\n\n  handleCardClick(index) {\n    if (this.state.cards[index].isOn) {\n      return false;\n    }\n\n    let cards = [...this.state.cards];\n    cards[index].isOn = true;\n    \n    this.setState({\n      cards: cards\n    });\n\n    let code = this.play(index);\n    this.setState({\n      message: this.statusMessages[code]\n    });\n\n  }\n\n  play(index) {\n    // Check if first card was selected.\n    if (this.state.card1 === -1) {\n      this.setState({\n        card1: index\n      })\n\n      return 'next_card';\n    }\n\n    // If first card wasn't selected, then it's safe to assume that the second card was.\n    let cards = [...this.state.cards];\n    let card1 = this.state.card1;\n    let matches = this.state.matches;\n\n    // Check if cards don't match.\n    if (cards[card1].value !== cards[index].value) {\n      setTimeout(() => {\n        cards[card1].isOn = false;\n        cards[index].isOn = false;\n        \n        this.setState({\n          card1: -1,\n          cards: cards\n        }) \n      }, 1000);\n\n      return 'not_a_match';\n    }\n\n    // Selected cards are a match.\n    this.setState({\n      card1: -1,\n      matches: matches + 1\n    });\n\n    // Check if all matching cards have been found.\n    if ((matches + 1) === (cards.length / 2)) {\n      return 'win';\n    }\n\n    return 'match';\n  }\n\n  render() {\n    return (\n      <div className=\"memory-game\">\n        <div className=\"status-bar\">\n          <p>{this.state.message}</p>\n        </div>\n        <ul className=\"items\">\n          {\n            this.state.cards.map((card, index) =>\n              <li key={index} className=\"item\">\n                <Card\n                  value={card.value}\n                  isOn={card.isOn}\n                  reveal={e => this.handleCardClick(index)}\n                />\n              </li>\n            )\n          } \n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport App from './App';\n\nrender(<App />, document.getElementById('root'));\n"],"sourceRoot":""}